#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal_I2C.h>

#define SS_PIN 10
#define RST_PIN 9

MFRC522 mfrc522(SS_PIN, RST_PIN);
LiquidCrystal_I2C lcd(0x27, 16, 2);

byte card_ID[4];
byte Name1[4] = {0x46, 0x70, 0xDE, 0x00};
byte Name2[4] = {0xF9, 0x09, 0x04, 0x00};

int NumbCard[2] = {0, 0};
int j = -1;

const int RedLed = 6;
const int GreenLed = 5;
const int Buzzer = 8;

String Name;
String UID;
String GradeSection;
String ContactNumber;
String TimeIn[2] = {"", ""};
String TimeOut[2] = {"", ""};

byte smiley[8] = {
  0b00000,
  0b01010,
  0b00000,
  0b00000,
  0b10001,
  0b01110,
  0b00000,
};

byte sadFace[8] = {
  0b00000,
  0b01010,
  0b00000,
  0b00000,
  0b01110,
  0b10001,
  0b00000,
};

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();

  lcd.init();
  lcd.backlight();
  lcd.createChar(0, smiley);
  lcd.createChar(1, sadFace);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Tap the Card");

  Serial.println("CLEARSHEET");
  Serial.println("LABEL,Date,Time,Name,UID,Grade & Section,Contact Number,Time In,Time Out");

  pinMode(RedLed, OUTPUT);
  pinMode(GreenLed, OUTPUT);
  pinMode(Buzzer, OUTPUT);
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  UID = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    card_ID[i] = mfrc522.uid.uidByte[i];
    UID += (mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
    UID += String(mfrc522.uid.uidByte[i], HEX);
  }
  UID.toUpperCase();

  lcd.clear();

  if (memcmp(card_ID, Name1, 4) == 0) {
    Name = "Ean Gingoyon";
    UID = "12345678";
    GradeSection = "Grade 10 - Happiness";
    ContactNumber = "9876543210";
    j = 0;
  } else if (memcmp(card_ID, Name2, 4) == 0) {
    Name = "Jane Smith";
    UID = "87654321";
    GradeSection = "Grade 12 - B";
    ContactNumber = "9123456789";
    j = 1;
  } else {
    digitalWrite(GreenLed, LOW);
    digitalWrite(RedLed, HIGH);
    lcd.setCursor(0, 0);
    lcd.print("ACCESS DENIED ");
    lcd.write(byte(1)); // sad face

    for (int i = 0; i < 3; i++) {
      digitalWrite(Buzzer, HIGH);
      delay(200);
      digitalWrite(Buzzer, LOW);
      delay(200);
    }

    delay(2000);
    lcd.clear();
    lcd.print("TAP THE CARD");
    digitalWrite(RedLed, LOW);
    return;
  }

  // Show on LCD
  lcd.setCursor(0, 0);
  if (NumbCard[j] == 0) {
    lcd.print("REGISTERED ");
    lcd.write(byte(0)); // smiley
    lcd.setCursor(0, 1);
    lcd.print(Name.substring(0, 16));
  } else if (NumbCard[j] == 1) {
    lcd.setCursor(0, 0);
    lcd.print("LOGGED OUT ");
    lcd.write(byte(0)); // smiley
    lcd.setCursor(0, 1);
    lcd.print("THANK YOU!");
  }

  // IMMEDIATE feedback
  digitalWrite(GreenLed, HIGH);
  digitalWrite(RedLed, LOW);
  for (int i = 0; i < 2; i++) {
    digitalWrite(Buzzer, HIGH);
    delay(100);
    digitalWrite(Buzzer, LOW);
    delay(100);
  }
  digitalWrite(GreenLed, LOW);

  String currentTime = "TIME"; // PLX-DAQ will replace with real PC time

  if (NumbCard[j] == 0) {
    TimeIn[j] = currentTime;
    TimeOut[j] = "";
    NumbCard[j] = 1;

    Serial.print("DATA,DATE," + currentTime + "," + Name + "," + UID + "," + GradeSection + "," + ContactNumber + "," + TimeIn[j] + ",");

    Serial.println();
    Serial.println("SAVEWORKBOOKAS,Attendance/AttendanceList");

  } else if (NumbCard[j] == 1) {
    TimeOut[j] = currentTime;

    Serial.print("DATA,DATE," + currentTime + "," + Name + "," + UID + "," + GradeSection + "," + ContactNumber + ",," + TimeOut[j]);
    Serial.println();

    NumbCard[j] = 0;
  }

  delay(1000); // Brief hold for user feedback
  lcd.clear();
  lcd.print("Tap the Card");
}
